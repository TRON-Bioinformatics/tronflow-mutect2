/*
 * -------------------------------------------------
 *  TRON-Bioinformatics/tronflow-mutect2/panel_of_normals Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

profiles {
    conda {
        params.enable_conda         = true
        conda.enabled               = true
        conda.createTimeout         = "120 min"
    }
    debug {
        cleanup                     = false
        dumpHashes                  = true
        process.beforeScript        = "echo $HOSTNAME" 
    }
    mamba {
        params.enable_conda         = true
        conda.enabled               = true
        conda.createTimeout         = "120 min"
        conda.useMamba              = true
    }
    test {
        timeline.enabled            = false
        report.enabled              = false
        trace.enabled               = false
        dag.enabled                 = false
    }
}

// export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE    = 1
    R_PROFILE_USER      = "/.Rprofile"
    R_ENVIRON_USER      = "/.Renviron"
}

// capture exit codes from upstream processes when piping
process.shell = ["/bin/bash", "-euo", "pipefail"]

VERSION     = "1.8.0"
DOI         = "https://zenodo.org/badge/latestdoi/355860788"

manifest {
    name                = "TRON-Bioinformatics/tronflow-mutect2/panel_of_normals"
    author              = "Pablo Riesgo-Ferreiro, Ã–zlem Muslu, Luisa Bresadola, Julian Thomas Mohr"
    homePage            = "https://github.com/TRON-Bioinformatics/tronflow-mutect2"
    description         = "MuTect2 best practices workflow to create a panel of normals"
    mainScript          = "main.nf"
    nextflowVersion     = ">=19.10.0"
    version             = VERSION
    doi                 = DOI
}
params.manifest = manifest

params.help_message = """
${params.manifest.name} v${params.manifest.version}
Authors: ${params.manifest.author}

${params.manifest.description}

Usage:
    nextflow run ${params.manifest.mainScript} --input_files INPUT_FILES --reference REFERENCE --intervals INTERVALS --gnomad GNOMAD [--output [OUTPUT]] [--max_mnp_distance [MAX_MNP_DISTANCE]] [--memory_mutect2 [MEMORY_MUTECT2]] [--memory_gather_vcfs [MEMORY_GATHER_VCFS]] [--memory_genomicsdb_import [MEMORY_GENOMICSDB_IMPORT]] [--memory_create_pon [MEMORY_CREATE_PON]]

Input:
    * input_files: the path to a tab-separated values file containing in each row the sample name and the path to a BAM file to be considered for computing the PON (indexes expected *.bai)
    	example:
        sample1 /path/to/sample1.bam
        sample2 /path/to/sample2.bam
        NOTE: the sample name must be set in the @SM annotation of the BAM header
    * reference: the path to the FASTA genome reference (indexes expected *.fai, *.dict)
    * intervals: the path to a BED file containing the genomic regions to analyze
    * gnomad: the path to the gnomad VCF or other germline resource

Optional input:
    * output: the folder where to publish output (default: output)
    * max_mnp_distance: maximum MNP distance that will be passed to Mutect2 (default: 0, recommended for creating a PON)
    * memory_mutect2: the ammount of memory used by Mutect2 (default: 16g)
    * memory_gather_vcfs: the ammount of memory used by Picard's GatherVcfs (default: 32g)
    * memory_genomicsdb_import: the ammount of memory used by GenomicsDBImport (default: 16g)
    * memory_create_pon: the ammount of memory used by CreateSomaticPanelOfNormals (default: 32g)

Output:
    * Output VCF files of single samples and TBI indexes
    * Output combined VCF `pon.vcf` and index `pon.vcf.idx`
    * Log files of all processes in `logs/` directory
"""
